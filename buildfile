# Generated by Buildr 1.2.10, change to your liking
repositories.remote << 'http://mirrors.sunsite.dk/maven2'
repositories.remote << 'http://repository.codehaus.org'
repositories.remote << 'http://www.oqube.com/maven2'
repositories.remote << 'http://www.ibiblio.org/maven2'
repositories.remote << 'http://mvn.carbonfive.com/public'
#repositories.remote << 'http://archiva.openqa.org/repository/releases'
#repositories.remote << 'http://nexus.openqa.org/content/repositories/releases'
repositories.remote << 'http://nexus.openqa.org/content/repositories/snapshots'

require 'dependencies.rb'

UMLSPEED=artifact(UMLSPEED_NAME).from(file('./bumblebee_uml/umlspeed-0.19/umlspeed.jar'))

#BUMBLEBEE_DEP = [BUMBLEBEE, MUSE_PARSER, PMD]
#BUMBLEBEE_JUNIT4_DEP = [BUMBLEBEE_DEP, JUNIT]

module Buildr
    class ZipTask
        def initialize(*args) #:nodoc:
            self.compression_level = Zlib::DEFAULT_COMPRESSION
            super
        end
    end
end

desc 'Bumblebee'
define 'com.agical.bumblebee' do 
    project.group = 'com.agical.bumblebee'
    project.version = BUMBLEBEE_VERSION
    project.compile.options.source = "1.5"
    project.compile.options.target = "1.5"
    
    repositories.release_to = "file:///tmp/bumblebee_upload_repo"

#    desc 'Alternative JUnit core runner.'
#    define 'junitalt' do
#        test.include 'com.agical.bumblebee.junit4.runners.TestingSuite'
#        compile.with  JUNIT
#        package :jar, :id => 'junitalt'
#        package :sources, :id => 'junitalt'
#        package :javadoc, :id => 'junitalt'
#    end
    
    desc 'Bumblebee is a framework for generating useful, human-friendly documentation from executing code.'
    define 'bumblebee' do
        compile.with MUSE_PARSER, JUNIT,PMD
        test.include 'com.agical.bumblebee.TestAll'
        package :jar, :id => 'bumblebee'
        package :sources, :id => 'bumblebee'
        package :javadoc, :id => 'bumblebee'
    end
    
    desc 'This is an extension to Bumblebee that creates a Ruby script from the data recieved 
    on the collector and from the comments in classes and methods involved. The script is executed 
    and the resulting output can be processed further if neccessary.'
    define 'bumblebee_jruby' do
        compile.with BUMBLEBEE, JRUBY, JUNIT
        test.include 'com.agical.bumblebee.jruby.TestAll'
        package :jar, :id => 'bumblebee_jruby'
        package :sources, :id => 'bumblebee_jruby'
        package :javadoc, :id => 'bumblebee_jruby'
    end
    
    desc 'This is an extension to use JUnit4 for executing the code that Bumblebee collects data from.'
    define 'bumblebee_junit4' do
        compile.with BUMBLEBEE, JUNIT
        test.include 'com.agical.bumblebee.junit4.TestAll'
        package :jar, :id => 'bumblebee_junit4'
        package :sources, :id => 'bumblebee_junit4'
        package :javadoc, :id => 'bumblebee_junit4'
    end

    desc 'This is a UML extension to draw diagrams of different kinds'
    define 'bumblebee_uml' do
        compile.with BUMBLEBEE, BUMBLEBEE_JUNIT4, BUMBLEBEE_JRUBY,
                  JUNIT, MUSE_PARSER, JRUBY, PMD, BATIK, UMLSPEED
        test.include 'com.agical.bumblebee.uml.TestAll'
        package :jar, :id => 'bumblebee_uml'
        package :sources, :id => 'bumblebee_uml'
        package :javadoc, :id => 'bumblebee_uml'
    end

    desc 'This is an extension to use Bumblebee with Selenium'
    define 'bumblebee_selenium' do
        compile.with BUMBLEBEE, BUMBLEBEE_JUNIT4, BUMBLEBEE_JRUBY,
                  JUNIT, MUSE_PARSER, JRUBY, PMD, SELENIUM
        test.include 'com.agical.bumblebee.selenium.TestAll'
        package :jar, :id => 'bumblebee_selenium'
        package :sources, :id => 'bumblebee_selenium'
        package :javadoc, :id => 'bumblebee_selenium'
    end

    desc 'This is an extension to use Bumblebee with Swing'
    define 'bumblebee_swing' do
        compile.with BUMBLEBEE, BUMBLEBEE_JUNIT4, BUMBLEBEE_JRUBY,
                  JUNIT, MUSE_PARSER, JRUBY, PMD
        test.include 'com.agical.bumblebee.swing.TestAll'
        package :jar, :id => 'bumblebee_swing'
        package :sources, :id => 'bumblebee_swing'
        package :javadoc, :id => 'bumblebee_swing'
    end

    desc 'This module contains acceptance tests for the JUnit 4 and JRuby modules.'    
    define 'bumblebee_junit4_acceptance' do
      test.include 'com.agical.bumblebee.acceptance.AllTest'
      compile.with BUMBLEBEE, BUMBLEBEE_JUNIT4, BUMBLEBEE_JRUBY, BUMBLEBEE_UML,BUMBLEBEE_SWING, BUMBLEBEE_SELENIUM,
                  JUNIT, MUSE_PARSER, JRUBY,PMD,UMLSPEED,BATIK,SELENIUM
      core_no_junit = package(:jar, :id=>'bumblebee-core-no-junit')
 
      compile.classpath.each {|c| core_no_junit.merge(c).
        exclude('junit/**/*.*').
        exclude('org/junit/**/*.*').
        exclude('org/apache/batik/**/*.*').
        exclude('org/apache/batik/**/*').
        exclude('com/thoughtworks/selenium/**/*.*').
        exclude('org/openqa/selenium/**/*.*').
        exclude('org/seleniumhq/selenium/**/*.*').
        exclude('META-INF/MANIFEST.MF')} 
      
      core = package(:jar, :id=>'bumblebee-core')
      compile.classpath.each {|c| core.
        merge(c).
        exclude('org/apache/batik/**/*.*').
        exclude('org/apache/batik/**/*').
        exclude('org/openqa/selenium/**/*.*').
        exclude('org/seleniumhq/selenium/**/*.*').
        exclude('META-INF/MANIFEST.MF')} 

      ['bumblebee', 'bumblebee_jruby', 'bumblebee_junit4','bumblebee_uml', 'bumblebee_selenium','bumblebee_swing'].each do |proj|
          package(:zip, :id => 'bumblebee-all').
                    include(_("../" + proj + "/*.*"), :path=>proj).
                    include(_("../" + proj + "/src"), :path=>proj).
                    include(_("../" + proj + "/target/javadoc"), :path=>proj)
      end
       
      package(:zip, :id => 'bumblebee-all').
          include(_("target/site/*"), :path=>"doc").
          include(compile.classpath, :path=>"lib").
          include(_("LICENSE.txt"), :path=>".").

          include(_("../bumblebee_junit4_acceptance/*.*"), :path=>"bumblebee_junit4_acceptance").
          include(_("../bumblebee_junit4_acceptance/src"), :path=>"bumblebee_junit4_acceptance").
          include(_("../bumblebee_junit4_acceptance/backlog.txt"), :path=>"bumblebee_junit4_acceptance").
          include(_("../bumblebee_junit4_acceptance/background.txt"), :path=>"bumblebee_junit4_acceptance").
          include(_("../bumblebee_junit4_acceptance/releases.txt"), :path=>"bumblebee_junit4_acceptance").

          include(_("../buildfile"), :path=>".")
          
      # two packagings here because we want the zip, but buildr won't write the .classpath fil
      # for zip packaging, hence the dummy jar
      package(:jar, :id => 'bumblebee_junit4_acceptance')
    end
end
